[General]
item_id_format=--%1--
maxitems=400
items="SUBDIRS+=examples\n", "TEMPLATE = app\nTARGET = \nDEPENDPATH += .\nINCLUDEPATH += .\nRESOURCES = qclip.qrc\nFORMS += mainwindow.ui\n\nHEADERS += mainwindow.h \\\n    clipboardbrowser.h \\\n    searchbar.h \\\n    qeditor.h \\\n    itemdelegate.h\n\nSOURCES += main.cpp \\\n    mainwindow.cpp \\\n    clipboardbrowser.cpp \\\n    searchbar.cpp \\\n    qeditor.cpp \\\n    itemdelegate.cpp\n\nQT += webkit xml\nLIBS += -lXi\n\ninclude(../qtsingleapplication/qtsingleapplication.pri)\n", "TEMPLATE=subdirs\n", # Input\n, "FORMS += mainwindow.ui\n", "    .\n", # #####################################################################\n# Automatically generated by qmake (2.01a) po 10 5 19:03:53 2009\n, "\n# Automatically generated by qmake (2.01a) po 10 5 19:03:53 2009\n# #####################################################################\nTEMPLATE = app\nTARGET = \nDEPENDPATH += .\nINCLUDEPATH += /home/lukas/dev/qt/qclip/src/. \\\n    .\nRESOURCES = qclip.qrc\n\n# Input\nHEADERS += mainwindow.h \\\n    clipboardbrowser.h \\\n    searchbar.h \\\n    qeditor.h \\\n    itemdelegate.h\nFORMS += mainwindow.ui\nSOURCES += main.cpp \\\n    mainwindow.cpp \\\n    clipboardbrowser.cpp \\\n    searchbar.cpp \\\n    qeditor.cpp \\\n    itemdelegate.cpp\nQT += webkit \\\n    xml\nLIBS += -lXi\ninclude(../qtsingleapplication/qtsingleapplication.pri)\n", # #####################################################################, ., src/\n, c/\n, clipboardbrowser.cpp.new, src/, c/, "    txt = Qt::escape(txt);\n", Qt::RichText, t::RichText, painter qtextbrowser draw, qstyleditemdelegate paint qtextbrowser draw, qstyleditemdelegate paint qtextbrowser, paint qtextbrowser, #include <QTextCharFormat>\n, "    //TODO: search regexp\n    QTextEdit edit( index.data().toString() );\n\n    // highlighted matched text\n    QList<QTextEdit::ExtraSelection> selections;\n\n    QTextEdit::ExtraSelection sel;\n    QTextCharFormat fmt;\n    fmt.setBackground( QColor(\"green\") );\n    sel.format = fmt;\n\n    edit.moveCursor( QTextCursor::Start );\n    while ( edit.find(m_search) ) {\n        QTextCursor c = edit.textCursor();\n        sel.cursor = c;\n        selections.append(sel);\n    }\n\n    //edit.setExtraSelections(selections);\n", "    //TODO: search regexp\n    QTextEdit edit( index.data().toString() );\n\n    // highlighted matched text\n    QList<QTextEdit::ExtraSelection> selections;\n\n    QTextEdit::ExtraSelection sel;\n    QTextCharFormat fmt;\n    fmt.setBackground( QColor(\"green\") );\n    sel.format = fmt;\n\n    edit.moveCursor( QTextCursor::Start );\n    while ( edit.find(m_search) ) {\n        QTextCursor c = edit.textCursor();\n        sel.cursor = c;\n        selections.append(sel);\n    }\n\n", "    //TODO: search regexp\n    QTextEdit edit( index.data().toString() );\n", "    QTextEdit edit( index.data().toString() );\n\n", "    itemdelegate.cpp\n", "    // style\n    QSettings::Format cssFormat = QSettings::registerFormat(\n            \"css\", readCssFile, writeCssFile);\n    QSettings cssSettings( cssFormat, QSettings::UserScope,\n            QCoreApplication::organizationName(),\n            QApplication::applicationName() );\n    QString css = cssSettings.value(\"css\", \"\").toString();\n    app.setStyleSheet(css);\n\n", "    // style\n    QSettings::Format cssFormat = QSettings::registerFormat(\n            \"css\", readCssFile, writeCssFile);\n    QSettings cssSettings( cssFormat, QSettings::UserScope,\n            QCoreApplication::organizationName(),\n            QApplication::applicationName() );\n    QString css = cssSettings.value(\"css\", \"\").toString();\n    app.setStyleSheet(css);\n", "    // style\n", "        QSettings::Format cssFormat;\n", "    cssFormat = QSettings::registerFormat(\"css\", readCssFile, writeCssFile);\n", "    // style\n    QSettings cssSettings( cssFormat, QSettings::UserScope, QApplication::organizationName(), QApplication::applicationName() );\n    QString css = cssSettings.value(\"css\", \"\").toString();\n    setStyleSheet(css);\n", "    // style\n    QSettings cssSettings( cssFormat, QSettings::UserScope, QApplication::organizationName(), QApplication::applicationName() );\n", "inline bool readCssFile(QIODevice &device, QSettings::SettingsMap &map)\n{\n    map.insert( \"css\", device.readAll() );\n    return true;\n}\n\ninline bool writeCssFile(QIODevice &, const QSettings::SettingsMap &)\n{\n    return true;\n}\n\n", "inline bool readCssFile(QIODevice &device, QSettings::SettingsMap &map)\n", QT, "    QStyleOptionViewItemV4 opt = option;\n    initStyleOption(&opt, index);\n\n    const QWidget *widget = QStyledItemDelegatePrivate::widget(option);\n    QStyle *style = widget ? widget->style() : QApplication::style();\n    style->drawControl(QStyle::CE_ItemViewItem, &opt, painter, widget);\n", "    QStyleOptionViewItemV4 opt = option;\n    initStyleOption(&opt, index);\n\n", #include <QTextCharFormat>, de <QTextCharFormat>, QTextCharFormat (), "        ExtraSelection sel;\n", "        sel.\n", stdio, selection, extraselec, Q, selec, find, new QExtraSelection(this), ew QExtraSelection(this), ), find, regexp, select, regexp, find, qtextedit, delega, "    edit.p\n", "    QStyle *style = option.\n", "void QItemDelegate::paint ( QPainter * painter, const QStyleOptionViewItem & option, const QModelIndex & index ) const", "int ( QPainter * painter, const QStyleOptionViewItem & option, const QModelIndex & index ) const", setitemw, \n        /* data */\n, "    itemDelegate\n", "    setItemWidget(\n", qlistwidget, clipboardbrowser.h, "    virtual ~ItemDelegate ();\n", itemdelegate.h\", itemdelegate.h, itemdelegate_t, stdio, #include \"qeditor.h\"\n, SYMBOL, /usr/include/qt4/Qt/qabstractitemview.h, "ode, buff, 256);\n    qDebug() << buff;\n\n    return 0;\n}\n\ninline bool readCssFile(QIODevice &device, QSettings::SettingsMap &map)\n{\n    map.insert( \"css\", device.readAll() );\n    return true;\n}\n\ninline bool writeCssFile(QIODevice &, const QSettings::SettingsMap &)\n{\n    return true;\n}\n\nClipboardBrowser::ClipboardBrowser(QWidget *parent) : QListWidget(parent)\n{", "    this->set\n", 0, 8010, 0, 6881, 0, 101, 192.168.15.101, 83.240.87.1, \t83.240.87.1, 3.240.87.1, \t83.240.87.1, "    connect( ui->clipboardBrowser, SIGNAL(itemCopied(const QString &)),\n            this, SLOT(itemCopied(const QString &)) );\n", "        void itemCopied(const QString &str);\n", "        void itemModified(uint hash, const QString &str);\n", "       void itemCopied(const QString &txt) { tray->showMessage( \"Copied\", txt, QSystemTrayIcon::NoIcon, 1000 ); };\n", "\n    emit itemCopied(x->text());\n", site:http://forum.ppcwarez.org/ windows mobile, pocket windows, ipaq linux, http://familiar.handhelds.org/git/familiar-build.git, "m_clip->setText(x->text());\n", "        m_clip->setText(x->text(),QClipboard::Selection);\n", insert, remove, qstyleopt, textdoc, "\n    doc.setHtml(html);\n", MEgalopolis Extra, http://qt.nokia.com/doc/4.5/qlistwidget.html#takeItem, "       void itemCopied(const QString &txt) { tray->showMessage( \"Copied\", txt, QSystemTrayIcon::NoIcon, 1000 ); };\n", "       void enterBrowseMode(bool browsemode = true);\n", "    qeditor.h\n", void MainWindow::keyPressEvent(QKeyEvent *event)\n{\n, "        tray->showMessage( \"Copied\", txt );\n", drawflow, qabstr, QStyleOptionViewItem, QStyleOptionViewIte, QStyleOptionVi, QStyleOpt, "void ItemDelegate::paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const\n{\n    options = QStyleOptionViewItemV4();\n        initStyleOption(options, index);\n\n        painter->save();\n\n        QTextDocument doc;\n        doc.setHtml(options.text);\n\n// get focus rect and selection background\n        options.text = \"\";\n        options.widget.style().drawControl(QStyle::CE_ItemViewItem, options, painter);\n\n// draw using our rich text document\n        painter.translate(options.rect.left(), options.rect.top());\n        rect = QRectF();\n        rect.__init__(0, 0, options.rect.width(), options.rect.height());\n        doc.drawContents(painter, rect);\n\n        painter.restore();\n", "    options = QStyleOptionViewItemV4();\n        initStyleOption(options, index);\n\n        painter->save();\n\n        QTextDocument doc;\n        doc.setHtml(options.text);\n\n// get focus rect and selection background\n        options.text = \"\";\n        options.widget.style().drawControl(QStyle::CE_ItemViewItem, options, painter);\n\n// draw using our rich text document\n        painter.translate(options.rect.left(), options.rect.top());\n        rect = QRectF();\n        rect.__init__(0, 0, options.rect.width(), options.rect.height());\n        doc.drawContents(painter, rect);\n\n        painter.restore();\n", "        painter->save();\n\n        QTextDocument doc;\n        doc.setHtml(options.text);\n\n// get focus rect and selection background\n        options.text = \"\";\n        options.widget.style().drawControl(QStyle::CE_ItemViewItem, options, painter);\n\n// draw using our rich text document\n        painter.translate(options.rect.left(), options.rect.top());\n        rect = QRectF();\n        rect.__init__(0, 0, options.rect.width(), options.rect.height());\n        doc.drawContents(painter, rect);\n\n        painter.restore();\n", ., "        options.__init__(option)\n", "    //qDebug() << index.data();\n", "options = QStyleOptionViewItemV4()\n        options.__init__(option)\n        self.initStyleOption(options, index)\n\n        painter.save()\n\n        doc = QTextDocument()\n        doc.setHtml(options.text)\n\n        #get focus rect and selection background\n        options.text = \"\"\n        options.widget.style().drawControl(QStyle.CE_ItemViewItem, options, painter)\n\n        #draw using our rich text document\n        painter.translate(options.rect.left(), options.rect.top())\n        rect = QRectF()\n        rect.__init__(0, 0, options.rect.width(), options.rect.height())\n        doc.drawContents(painter, rect)\n\n        painter.restore()\n", "options = QStyleOptionViewItemV4()\n", "options = QStyleOptionViewItemV4()\n        options.__init__(option)\n        self.initStyleOption(options, index)\n\n        painter.save()\n\n        doc = QTextDocument()\n        doc.setHtml(options.text)\n\n        #get focus rect and selection background\n        options.text = \"\"\n        options.widget.style().drawControl(QStyle.CE_ItemViewItem, options, painter)\n\n        #draw using our rich text document\n        painter.translate(options.rect.left(), options.rect.top())\n        rect = QRectF()\n        rect.__init__(0, 0, options.rect.width(), options.rect.height())\n        doc.drawContents(painter, rect)\n\n        painter.restore()", browser, deleg, browser, paint, browser, paint, rich, qlist, painter, qlistwidget rich items, qlistwidget html items, highlight word, h, qstyleditemdelegate, "        virtual ~ItemDelegate ();\n", "    Q_OBJECT\n", 0, "=", #include <QLocale>\n, stdio, "    itemdelegate.cpp\n", #include <QSystemTrayIcon>\n, #include <QTextDocument>\n, "    private:\n        /* data */\n", #include \"itemdelegate.h\"\n, \n    return locale.toString(), ");", (), ), g(), ), "        QString displayText ( const QVariant & value, const QLocale & locale ) const;\n", "QString QStyledItemDelegate::displayText ( const QVariant & value, const QLocale & locale ) const", "QObject * parent = 0);", Item\n, itemdelegate.h, stdio, "QObject * parent = 0", QStyledItemDelegate, itemdelegate_t, SYMBOL, /* condition */, delegate, "    currentItem()->set\n", qlistview OR qlistwidget edit break lines, qlistview OR qlistwidget highlight word, qlistview OR qlistwidget highlight, high, Qt 4.5: Qt's Classes, "bool writeCssFile(QIODevice &device, const QSettings::SettingsMap &map);\n", $HOME, swiftfox %s, brno repasovan\xe1, brno repas, "        bool readCssFile(QIODevice &device, QSettings::SettingsMap &map);\n        bool writeCssFile(QIODevice &device, const QSettings::SettingsMap &map);\n", "        const QSettings::Format CssFormat;\n", "    CssFormat = QSettings::registerFormat(QString(\"css\"), readCssFile, writeCssFile);\n", register, conf, register, style, s, "CssFormat( QSettings::registerFormat(\"css\", readCssFile, writeCssFile) )\n", "    CssFormat = QSettings::registerFormat(\"css\", readCssFile, writeCssFile);\n", #include <QSettings>\n, " QListView {\n     alternate-background-color: yellow;\n }", conf, "    return true;\n", "    map.\n", exam, ext, exte, exam, map, ";", "settings.value(\"items\", QStringList()).toStringList();", map, "        bool readXmlFile(QIODevice &device, QSettings::SettingsMap &map);\n        bool writeXmlFile(QIODevice &device, const QSettings::SettingsMap &map);\n", l, ClipboardBrowser::, "        bool readXmlFile(QIODevice &device, QSettings::SettingsMap &map);\n        bool writeXmlFile(QIODevice &device, const QSettings::SettingsMap &map);\n", " bool readXmlFile(QIODevice &device, QSettings::SettingsMap &map);\n bool writeXmlFile(QIODevice &device, const QSettings::SettingsMap &map);", "    const QSettings::Format CssFormat =\n", "    const QSettings::Format XmlFormat =\n        QSettings::registerFormat(\"css\", readCssFile, writeCssFile);\n", "const QSettings::Format XmlFormat =\n             QSettings::registerFormat(\"xml\", readXmlFile, writeXmlFile);\n\n     QSettings settings(XmlFormat, QSettings::UserSettings, \"MySoft\",\n                        \"Star Runner\");", "const QSettings::Format XmlFormat =\n             QSettings::registerFormat(\"xml\", readXmlFile, writeXmlFile);", conf, format, \n    // TODO: style\n, "    qDebug() << settings.;\n", "    QString m_style = \n    //QFile file;\n", style, path, tak mo\x17en\xe1 4Gb, path, style, static, "    QDir::\n", home, qdir, filename, "    settings.fileName( \"style.css\" );\n", filename, "    settings.f\n", "    QSettings settings;\n    //setStyleSheet();\n", exWidget( moveCursor( QAbstractItemView::MoveNext, moveCursor( QAbstractItemView::MoveNext, qlistwidget movecursor, "event->key() == Qt::Key_Return ", " != ", "            break;\n", "        case Qt::Key_F2:\n            openPersistentEditor( currentItem() );\n", editit, set, "        void setSearch(const QString &str);\n", "void ClipboardBrowser::setSearch(const QString &str)\n{\n    QString newsearch;\n\n    if (!str.isEmpty())\n        newsearch = QString(\"(%1)\").arg(str);\n\n    if (newsearch != m_search)\n        m_search = newsearch;\n\n    searchText();\n}\n", "        m_search = QRegExp(str);\n", "            if ( m_search.indexIn(it->text()) == -1 )\n                it->setHidden(true);\n", "            if ( m_search.indexIn(it->text()) != -1 )\n                it->setHidden(false);\n", "            if ( m.indexIn(it->text()) != -1 )\n", void ClipboardBrowser::filterItems(const QString &str)\n, "    QList<QListWidgetItem *> list( findItems(str, Qt::MatchExactly) );\n", qlistwidget, visi, "    QList<QListWidgetItem *> list( findItems(str, Qt::MatchExactly) );\n", "    // if serch string empty: all items visible\n", "    for(int i = 0; i < count(); ++i)\n", visi, iter, "        removeItemWidget( takeItem(row(*it)) );\n", cl5, >, *, Q, QListViewItemIterator, "        removeItemWidget( takeItem(row(*it)) );\n", "    QList<QListWidgetItem *> list = findItems(;\n", "    QList<QListWidgetItem *> list( findItems(str, Qt::MatchExactly) );\n", "    //\n", "    QList<QListWidgetItem *> list = selectedItems();\n    QList<QListWidgetItem *>::iterator it( list.begin() );\n    for(; it != list.end(); ++it)\n        removeItemWidget( takeItem(row(*it)) );\n", "    QList<QListWidgetItem *> list = selectedItems();\n", "    for(int i = 0; i < count(); ++i)\n", "    ;\n", "    for(int i = 0; i < count(); ++i)\n", "    QList<QListWidgetItem *> list = selectedItems();\n    QList<QListWidgetItem *>::iterator it( list.begin() );\n    for(; it != list.end(); ++it)\n", "        QString m_search;\n", "    if\n", "pam\x11bti: 2GB DDR2-667 Kingston CL5 kit 2x1GB 999,-", "1283,-", "z\xe1kladn\xed deska: ASROCK MB 4CoreDual-SATA2 R2.0 (775, via, DDR2, AGP, PCIE, 2xSATA2R, 2x133, 7.1, LAN)", http://www.itage.cz/p40367-cpu-intel-core-2-quad-q8200-box/, CPU INTEL Core 2 Quad Q8200 BOX, http://www.itage.cz/p141066-asrock-mb-4coredual-sata2-r2-0-775-via-ddr2-agp-pcie-2xsata2r-2x133-7-1-lan/, "ASROCK MB 4CoreDual-SATA2 R2.0 (775, via, DDR2, AGP, PCIE, 2xSATA2R, 2x133, 7.1, LAN)", http://www.itage.cz/p27966-2gb-ddr2-667-kingston-cl5-kit-2x1gb/, 2GB DDR2-667 Kingston CL5 kit 2x1GB, http://www.itage.cz/p27966-2gb-ddr2-667-kingston-cl5-kit-2x1gb/, two memory modules management, ddr, hyperx, "http://www.google.com/search?hl=en&q=", "http://www.google.com/search?hl=en&q=h", "http://www.google.com/search?hl=en&q=hy", "http://www.google.com/search?hl=en&q=hyper", "http://www.google.com/search?hl=en&q=hyperx"
editor=gvim -f %1

[MainWindow]
size=@Size(640 720)
pos=@Point(1194 373)
